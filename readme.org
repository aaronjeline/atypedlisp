#+TITLE: A Typed Lisp

* Goals
This is a toy Lisp implementation that has a static type system
** What works
- Turing Complete :D
- Simple static type checking for all calls.
- Function and variable types are inferred.
- Optional type annotations
** To Do
- Add abstract data types to the type system
- Better Error Messages
- Determine variable types from type annotation

* Language Description
/atypedlisp/ is a Lisp language, so it used S-expressions. ~(f x y)~ applies the function ~f~ to the arguments ~x~ and ~y~. 

** Data types: 
- Number
- Boolean (~#t~ or ~#f~)
- Strings (quoted text)
- Lists (they no longer make the type system choke!)
- Functions
- Structures
  
** Forms:
   - *let*: ~(let (varname expr1) (expr2))~, Bind expr1 to varname and evaluate expr2 in that environment.
   - *define*: Two forms ~(define name value)~, Evaluate value and bind to name in the global namespace
              ~(define (name args) body)~, shorthand for ~(define name (lambda args body))~
   - *if*: ~(if cond if-true if-false)~, Evalues cond, if the result is ~#t~, if-true is evaluated, otherwise, if-false is evaluated.
   - *struct*: Defines a structure. ~(struct name ((field : type) ...))~
   - *annotation*: ~(: f (number number) -> boolean)~, Create a type annotation

     
   
